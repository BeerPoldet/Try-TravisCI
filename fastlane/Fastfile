import("./Configfile")

def next_build_number(xcodeproj, app_identifier)
  build_number = [
    get_build_number(xcodeproj: xcodeproj).to_i, 
    latest_testflight_build_number(
      app_identifier: app_identifier
    )
  ].max + 1
end

def commit_and_push(xcodeproj, build_number, tag)
  commit_version_bump(
    xcodeproj: xcodeproj,
    message: format("[SKIP CI] New Build: %d 🎁", build_number),
    force: true
  )
  add_git_tag(tag: tag)
  branch_name = git_branch
  print_message "Pushing to remote_branch: #{branch_name}"
  push_to_git_remote(
    local_branch: "HEAD",
    remote_branch: branch_name
  )
end

def create_change_log(tag)
  changelog_url = ENV["CHANGE_LOG_URL"]
  "QA Testing Release\nYou can view change logs: #{changelog_url}/#{tag}"
end

def print_message(message)
  puts "\n"
  puts "################################################"
  puts "# #{message}"
  puts "################################################"
  puts "\n"
end

xcodeproj = ENV["XCODE_PROJECT"]

default_platform(:ios)

platform :ios do
  desc "Push a new beta build to TestFlight"
  lane :beta do
    print_message("Stage beta")
    config = configs[:beta]
    app_identifier = config[:app_identifier]
    
    build_number = next_build_number(xcodeproj, app_identifier)
    tag = config[:create_tag].call(build_number)
    changelog = create_change_log(tag)
    print_message("Change Logs: #{changelog}")
    
    ensure_git_status_clean
    increment_build_number(
      build_number: build_number,
      xcodeproj: xcodeproj
    )
    build_app(
      project: xcodeproj,
      scheme: config[:scheme],
      export_options: {
        method: "app-store",
        provisioningProfiles: configs[:provisioningProfiles]
      }
    )
    upload_to_testflight(
      app_identifier: app_identifier,
      changelog: changelog,
      skip_waiting_for_build_processing: false,
      reject_build_waiting_for_review: true
    )
    commit_and_push(xcodeproj, build_number, tag)
      # upload_to_app_store(
    #   force: true,
    #   skip_metadata: true,
    #   skip_screenshots: true,
    #   skip_app_version_update: true,
    #   submit_for_review: false,
    #   keywords: {
    #     'default' => 'keyword-qa',
    #     'th-TH' => 'keyword-qa-th'
    #   },
    #   promotional_text: {
    #     'default' => 'promotional_text-qa',
    #     'th-TH' => 'promotional_text-qa-th'
    #   },
    #   release_notes: {
    #     'default' => "Shiny and new",
    #     'th-TH' => "ทดสอบ"
    #   }
    # )
  end

  lane :test do
    print_message("Stage test")
    config = configs[:debug]
    run_tests(scheme: config[:scheme])
  end
end